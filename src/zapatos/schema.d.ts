/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v3.3.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 101 }

  type JSONSelectableFromSelectable<T> = { [K in keyof T]:
    Date extends T[K] ? Exclude<T[K], Date> | db.DateString :
    Date[] extends T[K] ? Exclude<T[K], Date[]> | db.DateString[] :
    T[K]
  };

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */


  /* === cross-table types === */

  // `never` rather than `any` types would be more accurate in this no-tables case, but they stop `shortcuts.ts` compiling

  export type Table = any;
  export type Selectable = any;
  export type Whereable = any;
  export type Insertable = any;
  export type Updatable = any;
  export type UniqueIndex = any;
  export type Column = any;
  export type AllTables = [];
  export type AllMaterializedViews = [];


  export type SelectableForTable<T extends Table> = any;

  export type WhereableForTable<T extends Table> = any;

  export type InsertableForTable<T extends Table> = any;

  export type UpdatableForTable<T extends Table> = any;

  export type UniqueIndexForTable<T extends Table> = any;

  export type ColumnForTable<T extends Table> = any;

  export type SQLForTable<T extends Table> = any;

}
